///// set parameters 

// define study area 
var StudyArea = ee.Geometry.Polygon([[
 [104.85326722623836,10.677369251927766],
 [105.41631654264461,10.677369251927766],
 [105.41631654264461,11.547872448031558],
 [104.85326722623836,11.547872448031558],
 [104.85326722623836,10.677369251927766]]
]);

// set centre
Map.setCenter(105.02272328859397,11.293384039398669,13)

// set visualiation parameters
var trueColor = {
  bands: ['B4', 'B3', 'B2'],
  min: 4000,
  max: 12000
};

// import collection 


var sentinel = ee.ImageCollection('COPERNICUS/S2')
  .filterDate('2018-12-01','2018-12-31') // limited to December 2018 to try out 
  .filterBounds(StudyArea)

////// Define the function for SIAC, as given here: https://github.com/MarcYin/SIAC_GEE/blob/master/SIAC_AC_ALL
        // but WITHOUT the export options

// A sensor invariant Atmospheric Correction (SIAC) GEE version
// v1 -- 2019-05-06
// Author: Fengn Yin, UCL
// Email: ucfafy@ucl.ac.uk
// Github: https://github.com/MarcYin/SIAC
// DOI: https://eartharxiv.org/ps957/
// LICENSE: GNU GENERAL PUBLIC LICENSE V3

// load all dependencies 
var s2_cloud = require('users/marcyinfeng/SIAC:S2_cloud')
var Sen2Cloud = require('users/marcyinfeng/SIAC:Sen2Cloud')
var inverse_6S_AOT = require('users/marcyinfeng/SIAC:Inverse_6S_AOT_brdf')
var inverse_S2_TCWV = require('users/marcyinfeng/SIAC:Inverse_S2_TCWV')
var kernel = require('users/marcyinfeng/SIAC:get_kernel')
var interp_mcd43a1 = require('users/marcyinfeng/SIAC:interp_MCD43A1')
var tnn = require('users/marcyinfeng/SIAC:Two_NN')
var s2b_ac = require('users/marcyinfeng/SIAC:S2B_AC')
var siac_processor = require('users/marcyinfeng/SIAC:AC_processor')

// define modified function

var siac = function(image){
  //image     = ee.Image(image) // to be mapped over collection
  var geom  = image.geometry()
  var image_date = image.date()
  var projection = image.select('B2').projection()
  var crs = projection.crs()
  var boa = siac_processor.get_boa(image)
  var aot   = boa.select('AOT')
  var tcwv  = boa.select('WVP')
  var tco3  = boa.select('TCO3')
  var cloud = boa.select('MSK_CLDPRB')
  var name     = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A',  'B11', 'B12']
  var new_name = ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B8A',  'B11', 'B12']
  var boa = boa.select(name, new_name).multiply(10000).toInt()
  var fname = ee.String(image.get('PRODUCT_ID')).getInfo() 
  //Export.image.toDrive({
  //            image: boa.select(['B02', 'B03', 'B04', 'B08']),
  //            description: fname + '_10m_sur',
  //            scale: 10,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //          })
  //Export.image.toDrive({
  //            image: boa.select(['B05', 'B06', 'B07', 'B8A', 'B11', 'B12']),
  //            description: fname + '_20m_sur',
  //            scale: 20,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //          })
  //Export.image.toDrive({
  //            image: boa.select(['B01']),
  //            description: fname + '_60m_sur',
  //            scale: 60,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //          })
  var cloud = cloud.toByte()//.add(shadow.toByte().multiply(2))
  //Export.image.toDrive({
  //            image: cloud,
  //            description: fname+ '_cloud',
  //            scale: 10,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //           })
  aot = aot.multiply(100).toInt().reproject(image.select('B2').projection(), null, 500)
  //Export.image.toDrive({
  //            image: aot,
  //            description: fname + '_aot',
  //            scale: 500,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //           })
  tcwv = tcwv.multiply(100) .toInt().reproject(image.select('B2').projection(), null, 500)
  //Export.image.toDrive({
  //            image: tcwv,
  //            description: fname + '_wv',
  //            scale: 60,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //           })
  //Export.image.toDrive({
  //            image: tco3,
  //            description: fname + '_o3',
  //            scale: 500,
  //            fileFormat: 'GeoTIFF',
  //            folder:'S2_SUR',
  //            region: geom,
  //            maxPixels: 1e13
  //           })
}

// var s2_file = '20190303T184259_20190303T184825_T10SGF'
// var s2_file = '20180115T030049_20180115T030132_T50SND'
// var image = ee.ImageCollection('COPERNICUS/S2').filterMetadata('system:index', 'equals', s2_file)
//                       .first()
// var id = 'S2A_MSIL1C_20190227T030651_N0207_R075_T50SMG_20190227T074020'
// var image = ee.ImageCollection('COPERNICUS/S2').filterMetadata('PRODUCT_ID', 'equals', id)
                      // .first()
// var s2_file = '20190122T034049_20190122T034312_T47PPR'
// var image = ee.ImageCollection('COPERNICUS/S2').filterMetadata('system:index', 'equals', s2_file)
//                       .first()

// //print(image)
// siac(image)

exports.siac = siac

//// Apply the function

var atmcorr = sentinel.siac.siac()

Map.addLayer(atmcorr, trueColor, 'atmospherically corrected')



